title: Distributed Component Object Model
id: 32983213-148d-46e7-82c0-5c596955968c
status: test
description: |
  This detection works by detecting close time proximity between incoming network traffic on RPC/TCP followed by creation of a DCOM object, followed by a creation of the child process of the DCOM object.
  The query first identifies incoming network traffic over RPC/TCP followed by the creation of a DCOM object (process) within 2 seconds, followed by the creation of a child process of this DCOM object.
references:
  - https://github.com/FalconForceTeam/FalconFriday/blob/master/Lateral%20Movement/T1021-WIN-002.md
author:
  - FalconForce
date: 07.06.2024
modified: 07.06.2024
tags:
  - attack.lateral_movement
  - attack.t1021.003
  - falcon.T1021-WIN-002
logsource:
  product: microsoft defender for endpoint
detection:
  load: low
  kusto: |
    let rpcNetwEvents = materialize(DeviceNetworkEvents
    | where InitiatingProcessFileName =~ "svchost.exe" and InitiatingProcessCommandLine contains "rpcss" and LocalPort == 135
    | where LocalIP !~ RemoteIP and ActionType != "ListeningConnectionCreated"
    | project TimestampNetwEvent=bin(Timestamp, 5s),TimestampNetwEventExact=Timestamp, DeviceId, DeviceName, RPCHostID=InitiatingProcessId, RPCHostFileName=InitiatingProcessFileName, LocalIP, RemoteIP);
    let dcomProcEvents = materialize (DeviceProcessEvents
    | where InitiatingProcessFileName =~ "svchost.exe" and InitiatingProcessCommandLine contains "dcomlaunch"
    | project TimestampProcEvent=bin(Timestamp, 5s),TimestampProcEventExact=Timestamp, DeviceId, DeviceName, DCOMHostPID=InitiatingProcessId, DCOMHostFileName=InitiatingProcessFileName, DCOMPID=ProcessId, DCOMFileName=FileName, DCOMCmdLine=ProcessCommandLine);
    let lastBootTime = materialize(DeviceProcessEvents
    | where FileName =~ "services.exe"
    | summarize LastBootTime=max(Timestamp) by DeviceId);
    let RemoteDcomProcs = materialize(rpcNetwEvents
    | join kind=inner dcomProcEvents on DeviceId
    | join kind=leftouter lastBootTime on DeviceId
    | where TimestampProcEvent > LastBootTime+5m //Ignore first 5 min after boot
    //avoiding < 2 since if the time between netw and proc creation is negative, they can't be related. Network event must come first.
    | where datetime_diff("second", TimestampProcEventExact, TimestampNetwEventExact) between (0 .. 2)
    //whitelisting some usual suspects which create lot of noise. This is dangerous though...huge gap for bypass.
    | where DCOMFileName  !in ("TiWorker.exe", "dllhost.exe", "backgroundTaskHost.exe", "mobsync.exe", "WmiPrvSE.exe",
        "RuntimeBroker.exe", "smartscreen.exe", "SppExtComObj.Exe", "usocoreworker.exe", "browser_broker.exe", "ssoncom.exe"));
    RemoteDcomProcs
    | join kind=inner hint.strategy=broadcast (
        DeviceProcessEvents
        | where InitiatingProcessParentFileName =~ "svchost.exe" and InitiatingProcessFileName in ((RemoteDcomProcs | project DCOMFileName)))
    on $left.DCOMHostPID == $right.InitiatingProcessParentId, DeviceId, $left.DCOMPID == $right.InitiatingProcessId
    | where InitiatingProcessParentFileName =~ "svchost.exe" and InitiatingProcessFileName =~ DCOMFileName
    | where FileName !in~ ("csc.exe") //whitelisting the black magic of Defender.
    | summarize make_set(ProcessCommandLine) by TimestampNetwEventExact, TimestampProcEventExact, DeviceId, DeviceName, InitiatingProcessId, LocalIP, RemoteIP, LastBootTime, DCOMCmdLine
  falsepositives:
  - N/A
level: medium
