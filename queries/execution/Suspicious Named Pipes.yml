title: Suspicious Named Pipes
id: 73be56f1-c16d-4fa8-9cab-1b4d352aa56d
status: test
description: |
  Cobalt Strike is used as a post-exploitation tool with various malware droppers responsible for the initial infection stage.
  Named pipes are used to send the output of the post-exploitation tools to the beacon. Cobalt Strike is using default unique pipe names, which defenders can use for detection.
  However, Cobalt Strike allows the operators to change the name of the pipes to any name of their choosing by configuring the malleable C2 profile accordingly.
references:
  - https://github.com/FalconForceTeam/FalconFriday/blob/master/Execution/T1559-WIN-001.md
  - https://medium.com/falconforce/falconfriday-suspicious-named-pipe-events-0xff1b-fe475d7ebd8
  - https://gist.github.com/MHaggis/6c600e524045a6d49c35291a21e10752
  - https://gist.github.com/svch0stz/c3288929c0e83eacdd558190b047df6e

author:
  - FalconForce
date: 06.06.2024
modified: 06.06.2024
tags:
  - attack.execution
  - attack.defenseevasion
  - attack.t1559
  - attack.t1055 
logsource:
  product: microsoft defender for endpoint
detection:
  load: medium
  kusto: |
    let timeframe=30d;
    let CobaltStrikeDefaults= dynamic([@"msagent_", @"MSSE-", @"postex_", @"status_", @"mypipe-f", @"mypipe-h",@"ntsvcs_",@"scerpc_", @"mojo.5688.8052."]);
    let CobaltStrikeMallable= dynamic([@"win_svc", @"ntsvcs", @"scerpc", @"status_", @"SearchTextHarvester", @"DserNamePipe",@"wkssvc_",@"scerpc_", @"spoolss_",@"CatalogChangeListener",@"fullduplex_",@"demoagent_",@"PGMessagePipe",@"MsFteWds",@"postex_ssh_",@"windows.update.manager",@"\f4c3",@"\f53f",@"halfduplex_"]);
    DeviceEvents
    | where Timestamp >= ago(timeframe)
    | where ActionType == "NamedPipeEvent"
    | extend AdditionalFields=parse_json(AdditionalFields)
    | extend ThreadId=tostring(AdditionalFields.ThreadId)
    | extend PipeName=tostring(AdditionalFields.PipeName)
    // creating string based variants of the processIDs for matching several times later
    | extend InitiatingPID=tostring(InitiatingProcessId)
    | extend InitiatingParentPID=tostring(InitiatingProcessParentId)
    // Customer specific whitelist
    // End customer specific whitelist
    | where PipeName has_any (CobaltStrikeDefaults) or
    // mojo is generated by Chrome(ium) browsers and teams and have distinct pattern including the (parent)ProcessId and ThreadId plus a random character string, CobaltStrike generates hex
            (PipeName matches regex @"\\mojo\.\d+\.\d+\." and not(PipeName matches regex @"\\mojo\.\d+\.\d+\.\d+$" or PipeName has InitiatingPID or PipeName has InitiatingParentPID or PipeName has ThreadId)) or
    // chrome(ium) browsers sync processes have distinct pattern including the (parent)ProcessId and ThreadId plus a random character string, CobaltStrike generates hex
            (PipeName matches regex @"\\(edge|chrome)\.sync\.\d+\.\d+\." and not(PipeName matches regex @"\\(edge|chrome|edge\.sync|chrome\.sync)\.\d+\.\d+\.\d+$" or PipeName has InitiatingPID or PipeName has InitiatingParentPID or PipeName has ThreadId)) or
    // PSHost is generated by PowerShell and has a distinct pattern including the (parent)ProcessId
            (PipeName matches regex @"\\PSHost\.\d+\." and not(PipeName matches regex @"\\PSHost\.\d+\.\d+\." or PipeName has InitiatingPID or PipeName has InitiatingParentPID)) or
    // crashpad pipes have a distinct pattern including the ProcessId and a string of upper case characters
            (PipeName matches regex @"\\crashpad_" and not(PipeName matches regex @"\\crashpad_\d+_[A-Z]+" or PipeName has InitiatingPID or PipeName has InitiatingParentPID)) or
    // firefox pipes have a distinct pattern including the ProcessId and 1-3 digits which are sequential for each new pipe
            (PipeName matches regex @"\\cubeb-pipe-" and not(PipeName matches regex @"\\cubeb-pipe-\d+_[0-9]{1-3}+" or PipeName has InitiatingPID)) or
    // based on a list of public mallable profiles and a suffix that is a random HEX string
            (PipeName has_any (CobaltStrikeMallable) and PipeName matches regex @"[a-fA-F0-9]{2,10}$") or
            (PipeName matches regex @"\\pipe\\[0-9a-f]{7,10}" or PipeName matches regex @"\\pipe\\[0-9a-f]{8}")
    | where not(PipeName has "status_monitor") // Often seen false positive, triggered by CobaltStrikeDefaults
falsepositives:
  - N/A
level: medium
