title: Spearphishing link
id: 04f1530e-f82c-40aa-8d3a-0f5cb49c5651
status: test
description: |
  The query looks for file downloads from the internet based on network connections.
  The query tries to match FileCreate events with network activity based on time proximity.
  Next, the query allows to filter out downloads from whitelisted domains.
  Finally, it shows all office process that have opened the downloaded file and have spawned a child process.
references:
  - https://github.com/FalconForceTeam/FalconFriday/blob/master/Initial%20Access/T1566-WIN-002.md
author:
  - FalconForce
  - Linus
date: 06.06.2024
modified: 06.06.2024
tags:
  - attack.initial_access
  - attack.t1566.002
  - falcon.T1566-WIN-001
logsource:
  product: microsoft defender for endpoint
detection:
  load: low
  kusto: |
    let browsers = dynamic(["iexplore.exe", "chrome.exe", "firefox.exe", "msedge.exe"]);
    let ext = dynamic([".docm", ".xlsm", ".xls", ".doc", ".pptm", ".ppt"]);
    let officeApps = dynamic(["winword.exe", "excel.exe", "powerpnt.exe"]);
    let whitelist = dynamic(["ai.exe","acrotray.exe","MSOSYNC.exe", "splwow64.exe", "csc.exe", "outlook.exe", "AcroRd32.exe", "Acrobat.exe", "explorer.exe", "DW20.exe", "Microsoft.Mashup.Container.Loader.exe", "Microsoft.Mashup.Container.NetFX40.exe", "WerFault.exe", "CLVIEW.exe"]);
    let whitelistedDomains = dynamic([]); // Optionally add your domains
    let binPeriodForSearch = 15m;
    let timeDiffFileCreateNetworkEvent = 15; //in seconds, don't make this 15s because of comparison later on.
    let timeframe = 7d; // Not sure if it's a good idea to have a long timeframe, might cause PID collissions
    //List all filecreate events where the filename has a known office extension which can contain macros
    let fileDownloads = materialize(DeviceFileEvents
    | where Timestamp > ago(timeframe)
    //we need to have FileCreated and FileRenamed here because some browsers first download the file under a different name and rename it when it's done.
    //e.g. the chrome .crdownload files are all renamed to the intended name after the download has finished.
    | where ActionType in ("FileCreated", "FileRenamed") and InitiatingProcessFileName in~ (browsers) and FileName has_any (ext)
    //we need to do this, to limit the search of deviceNetworkEvents. Otherwise, the dataset becomes too big to join in MDE.
    | extend period=bin(Timestamp, binPeriodForSearch)
    //optimizations to keep MDE happy. Otherwise the databasets get too big
    | project DeviceId, InitiatingProcessFileName, InitiatingProcessId, period, FileName, Timestamp
    //the renames are meant to avoid confusions as there will be a lot of FileNames from different tables.
    | project-rename DeviceFileEvents_InitiatingProcessFileName = InitiatingProcessFileName,
                    DeviceFileEvents_FileName = FileName,
                    DeviceFileEvents_Timestamp = Timestamp);
    //now we need to find the networkevent that triggered the the filewrite.
    //this is an approximation based on timestamp, deviceid, pid and processname
    let downloadSource = materialize(DeviceNetworkEvents
    | where Timestamp > ago(timeframe)
    | where DeviceId in ((fileDownloads | project DeviceId)) and RemotePort in (80, 443)
    | extend period=bin(Timestamp, binPeriodForSearch)
    //exclude whitelisted domains. Here you want to whitelist your internal sharepoint environment
    //this can be useful if you want to use this rule for external attacks.
    //there is a trade-off as an internal attacker might abuse your sharepoint for malware.
    //| where parse_url(RemoteUrl).Host !in~ (whitelistedDomains) // Optionally add your domains
    | lookup kind=inner fileDownloads on DeviceId, InitiatingProcessId, $left.InitiatingProcessFileName == $right.DeviceFileEvents_InitiatingProcessFileName, period
    | extend TimeDiff = datetime_diff('second', Timestamp, DeviceFileEvents_Timestamp)
    //the filecreate and network event should happen within max 15 second of eachother.
    | where  -timeDiffFileCreateNetworkEvent < TimeDiff and TimeDiff < timeDiffFileCreateNetworkEvent
    // we're now only interessted in the unique filenames of the downloads and the location they're possibly downloaded from
    | summarize possibelURLs=make_set(RemoteUrl) by DeviceFileEvents_FileName
    );
    //final step in tying everything together.
    //find office applications that create a child process which is in our previously generated list
    //we don't fileter on devicename because we want to see all instances of this file being run.
    DeviceProcessEvents
    | where Timestamp > ago(timeframe)
    | where InitiatingProcessFileName in~ (officeApps) and FileName !in~ (officeApps) and FileName !in~ (whitelist) and FileName !in~ (browsers)
    | project-rename DeviceProcessEvents_InitiatingProcessCommandLine = InitiatingProcessCommandLine
    | where DeviceProcessEvents_InitiatingProcessCommandLine has_any (( downloadSource | project DeviceFileEvents_FileName))
falsepositives:
  - N/A
level: medium
