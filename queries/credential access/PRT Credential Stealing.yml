title: PRT Credential Stealing
id: 3effff01-8ba1-466c-bf38-77bb4012b164
status: test
description: |
  â€‹This rule detects when BrowserCore.exe is accessed by a suspicious process.
  The BrowserCore.exe binary is responsible for allowing browser add-ons to make use of Single Sign On via Azure AD.
  This rule detects when an uncommon process interacts with the BrowserCore.exe process.
references:
  - https://github.com/FalconForceTeam/FalconFriday/blob/master/Credential%20Access/T1134.001-WIN.md
  - https://medium.com/falconforce/falconfriday-stealing-and-detecting-azure-prt-cookies-0xff18-96efce74ce63
  - https://dirkjanm.io/abusing-azure-ad-sso-with-the-primary-refresh-token/
  - https://o365blog.com/post/prt/
  - https://posts.specterops.io/requesting-azure-ad-request-tokens-on-azure-ad-joined-machines-for-browser-sso-2b0409caad30
author:
  - FalconForce
date: 05.06.2024
modified: 05.06.2024
tags:
  - attack.credential_access
  - attack.execution
  - attack.t1003
  - attack.t1106
  - falcon.T1134.001-WIN
logsource:
  product: microsoft defender for endpoint
detection:
  load: medium
  kusto: |
    let timeframe = 30d;
    let lolbins = dynamic(["at.exe", "atbroker.exe", "bash.exe", "bitsadmin.exe", "certreq.exe", "certutil.exe", "cmd.exe", "cmdkey.exe", "cmstp.exe", "control.exe", "csc.exe", "cscript.exe", "desktopimgdownldr.exe", "dfsvc.exe", "diantz.exe", "diskshadow.exe", "dnscmd.exe", "esentutl.exe", "eventvwr.exe", "expand.exe", "extexport.exe", "extrac32.exe", "findstr.exe", "forfiles.exe", "ftp.exe", "gfxdownloadwrapper.exe", "gpscript.exe", "hh.exe", "ie4uinit.exe", "ieexec.exe", "ilasm.exe", "infdefaultinstall.exe", "installutil.exe", "jsc.exe", "makecab.exe", "mavinject.exe", "microsoft.workflow.compiler.exe", "mmc.exe", "mpcmdrun.exe", "msbuild.exe", "msconfig.exe", "msdt.exe", "mshta.exe", "msiexec.exe", "netsh.exe", "odbcconf.exe", "pcalua.exe", "pcwrun.exe", "pktmon.exe", "presentationhost.exe", "print.exe", "psr.exe", "rasautou.exe", "reg.exe", "regasm.exe", "regedit.exe", "regini.exe", "register-cimprovider.exe", "regsvcs.exe", "regsvr32.exe", "replace.exe", "rpcping.exe", "rundll32.exe", "runonce.exe", "runscripthelper.exe", "sc.exe", "schtasks.exe", "scriptrunner.exe", "syncappvpublishingserver.exe", "ttdinject.exe", "tttracer.exe", "vbc.exe", "verclsid.exe", "wab.exe", "wmic.exe", "wscript.exe", "wsreset.exe", "xwizard.exe", "agentexecutor.exe", "appvlp.exe", "bginfo.exe", "cdb.exe", "csi.exe", "devtoolslauncher.exe", "dnx.exe", "dotnet.exe", "dxcap.exe", "excel.exe", "mftrace.exe", "msdeploy.exe", "msxsl.exe", "ntdsutil.exe", "powerpnt.exe", "rcsi.exe", "sqldumper.exe", "sqlps.exe", "sqltoolsps.exe", "squirrel.exe", "te.exe", "tracker.exe", "vsjitdebugger.exe", "winword.exe", "wsl.exe"]);
    //adding servics.exe and svchost.exe to the list of lolbins since these can be abused to start cmd.exe and talk to browsercore.
    let extendedLolbins = array_concat(lolbins, dynamic(["services.exe", "svchost.exe"]));
    let trustedProcess = dynamic(["chrome.exe", "teams.exe"]);
    let trustedProcessHashes = DeviceProcessEvents | where FileName in~ (trustedProcess);
    let suspiciousHashes = trustedProcessHashes | distinct SHA1 | invoke FileProfile(SHA1, 1000) | where GlobalPrevalence < 200 or isempty(GlobalPrevalence);
    DeviceProcessEvents
    | where Timestamp >= ago(timeframe)
    | where ProcessVersionInfoOriginalFileName == "BrowserCore.exe"
    | join kind = leftouter (DeviceProcessEvents) on $left.InitiatingProcessParentId == $right.ProcessId, DeviceId, $left.InitiatingProcessParentFileName == $right.FileName
    // filter grandparent
    | where SHA11 in~ (suspiciousHashes) or InitiatingProcessParentFileName !in~ (trustedProcess)
    // filter parent
    | where InitiatingProcessSHA1 in~ (suspiciousHashes) or InitiatingProcessFileName !in~ (trustedProcess)
    // removing empty SHA11 hashes since sometimes the process start event is not logged and hence SHA11 is empty
    // this contaminates the results. A future improvement would be to check if the trusted process we're looking
    // for is logged as parent (instead of as child)
    | where not(isempty(SHA11))
    | invoke FileProfile(SHA11, 1000)
    | where GlobalPrevalence < 200 or isempty(GlobalPrevalence) or InitiatingProcessParentFileName in~ (extendedLolbins)
falsepositives:
  - There are some applications that perform these actions for legitimate purposes, one example is Procmon by Sysinternals.
level: medium
